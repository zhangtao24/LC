
/**************************************************************************
generate the grid
***************************************************************************/
var generateGrid = function(xmin, ymin, xmax, ymax, dx, dy) {
  var xx = ee.List.sequence(xmin, ee.Number(xmax).subtract(0.0001), dx);
  var yy = ee.List.sequence(ymin, ee.Number(ymax).subtract(0.0001), dy);
  
  var cells = xx.map(function(x) {
    return yy.map(function(y) {
      var x1 = ee.Number(x);
      var x2 = ee.Number(x).add(ee.Number(dx));
      var y1 = ee.Number(y);
      var y2 = ee.Number(y).add(ee.Number(dy));
      var coords = ee.List([x1, y1, x2, y2]);
      var rect = ee.Algorithms.GeometryConstructors.Rectangle(coords);   //生成矩形
      return ee.Feature(rect);
    });
  }).flatten();   //变成单个数组

  return ee.FeatureCollection(cells);
};

var bounds = roi.geometry().bounds();
var coords = ee.List(bounds.coordinates().get(0));
var xmin = ee.List(coords.get(0)).get(0);
var ymin = ee.List(coords.get(0)).get(1);
var xmax = ee.List(coords.get(2)).get(0);
var ymax = ee.List(coords.get(2)).get(1);

var dx = 1;
var dy = 1;
// print("dx, dy", dx, dy);


var grid = generateGrid(xmin, ymin, xmax, ymax, dx, dy);    //设置参数，生成格网
var grid = grid.filterBounds(roi); // filter out out-of-boundary tiles

// print(grid.size());
Map.addLayer(grid, {color:'orange'}, 'grid');
// print(grid.first());

var gridSize = grid.size().getInfo();
// print("gridSize size:", gridSize);
var gridList = grid.toList(gridSize);

var ls = [];
var ls2 = [];


// 在training要素集中增加一个random属性，值为0到1的随机数
var withRandom = training.randomColumn({
  columnName:'random',
  seed: 8
});
training = null;
//把生成随机数大于0.7的分成测试数据，否则为训练数据
var split = 0.7; 
var trainingPartition = withRandom.filter(ee.Filter.lt('random', split));
var testingPartition = withRandom.filter(ee.Filter.gte('random', split));
print(testingPartition.size())

//*******************************************************************分块分类  
for(var i=0; i<gridSize; i++){
    var local_grid1 = ee.Feature(gridList.get(i));
 
  var bounds1 = local_grid1.geometry().bounds();
  var coords1 = ee.List(bounds1.coordinates().get(0));
  var region_Lon_min1 = ee.Number(ee.List(coords1.get(0)).get(0)).subtract(dx);
  var region_Lat_min1 = ee.Number(ee.List(coords1.get(0)).get(1)).subtract(dy);
  var region_Lon_max1 = ee.Number(ee.List(coords1.get(2)).get(0)).add(dx);
  var region_Lat_max1 = ee.Number(ee.List(coords1.get(2)).get(1)).add(dy);

  var roi_tmp1 = ee.Geometry.Polygon(
          [[[region_Lon_min1, region_Lat_max1],
            [region_Lon_max1, region_Lat_max1],
            [region_Lon_max1, region_Lat_min1],
            [region_Lon_min1, region_Lat_min1],
            [region_Lon_min1, region_Lat_max1]]]);

  var roi_tmp1 = roi_tmp1.intersection(roi.geometry(),0.5)
    // Map.addLayer(roi_tmp1,{'color':'red'},'roi_tmp'+i)

var trainedClassifier = ee.Classifier.smileRandomForest(115).train({
    features: trainingPartition.filterBounds(roi_tmp1),
    classProperty: 'landcover',
    inputProperties: bands
  });
  
    // //对sentinel进行分类
  var class_img = composite_add.clip(local_grid1).classify(trainedClassifier);
  // //对测试数据进行预测
  var test = testingPartition.filterBounds(roi).classify(trainedClassifier);
  ls.push(ee.Image(class_img));
  ls2.push(test); 
}
print(test.size())
var class_img = ee.ImageCollection(ls).mosaic();
ls = null;
composite_add = null;

var classif1 = class_img.clip(yn1);
var confusionMatrix = test.errorMatrix('landcover', 'classification');//计算混淆矩阵
print('confusionMatrix',confusionMatrix);//面板上显示混淆矩阵
print('overall accuracy', confusionMatrix.accuracy());//面板上显示总体精度
// print('kappa accuracy', confusionMatrix.kappa());//面板上显示kappa值

Map.addLayer(classif1.randomVisualizer(), null,'classification');

//确定精度最高的决策树数量
var numTrees = ee.List.sequence(5, 150, 5); 
var accuracies = numTrees.map(function(t)
{ 
  var trainedClassifier = ee.Classifier.smileRandomForest(t)
                    .train({
                features: trainingPartition.filterBounds(roi_tmp1),
                classProperty: 'landcover',
                inputProperties: bands
                    });
  return test
      .classify(trainedClassifier)
      .errorMatrix('landcover', 'classification')
      .accuracy();
}); 

print(ui.Chart.array.values({
  array: ee.Array(accuracies),
  axis: 0,
  xLabels: numTrees
}))

